#!/bin/bash
: '
Access to this file is granted under the SCONE COMMERCIAL LICENSE V1.0 

Any use of this product using this file requires a commercial license from scontain UG, www.scontain.com.

Permission is also granted  to use the Program for a reasonably limited period of time  (but no longer than 1 month) 
for the purpose of evaluating its usefulness for a particular purpose.

THERE IS NO WARRANTY FOR THIS PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING 
THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, 
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. 

THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED ON IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, 
INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM INCLUDING BUT NOT LIMITED TO LOSS 
OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE 
WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Copyright (C) 2020 scontain.com
'

set -eu

umask 077

###
### Globals
###

# define default arguments

NAMESPACE="NS-$RANDOM"
CREATE_NAMESPACE=0
NATIVE_IMAGE=""
TO_IMAGE=""
PLAIN_DIRS=()
TEMPLATE_FILE="session-template.yml"
SESSION_FILE="session.yml"
CAS="5-2-0.scone-cas.cf"
CLI_IMAGE="registry.scontain.com:5050/sconecuratedimages/kubernetes:hello-k8s-scone0.1"
BASE_IMAGE="registry.scontain.com:5050/sconecuratedimages/kubernetes:python-3.7.3-alpine3.10-scone5.1"
TRACE_FILE=""
SCONE_HEAP="1G"
SCONE_STACK="4M"
SCONE_ALLOW_DLOPEN="2"

###
### Functions
###

# print the right color for each level
#
# Arguments:
# 1:  level

function msg_color {
    priority=$1
    if [[ $priority == "fatal" ]] ; then
        echo -e "\033[31m"
    elif [[ $priority == "error" ]] ; then
        echo -e "\033[34m"
    elif [[ $priority == "warning" ]] ; then
        echo -e "\033[35m"
    elif [[ $priority == "info" ]] ; then
        echo -e "\033[36m"
    elif [[ $priority == "debug" ]] ; then
        echo -e "\033[37m"
    elif [[ $priority == "default" ]] ; then
        echo -e "\033[00m"
    else
        echo -e "\033[32m";
    fi
}

function error_exit {
    msg_color "error"
    echo "ERROR: $1" >&2
    msg_color "default"
    exit 1
}


function check_empty
    if [[ -z "$2" ]] ; then
        error_exit "$1"
    fi

function show_help {
    echo -e \
"Usage: sconify_image [OPTIONS]
A script to convert a Python Image into an encrypted Python image running inside of an enclave.
The approach assumes that one has created

- NATIVE_IMAGE: an image that is not encrypted and that runs natively
- POLICY: a policy template to generate a session policy for this image

and it generate
- a policy and optionally uploads this to a given CAS
- generate an encrypted image TOIMAGE

it uses some standard images in the generation:

- CLIIMAGE: a standard image that contains the SCONE CLI
- BASEIMAGE: a standard that contains the binary - like the sconified Python

The following options are supported:

  -h, --help               display this help and exit

REQUIRED:
  --from=NATIVE_IMAGE       name of native image
  --to=TO_IMAGE             name of encrypted image
  --base=BASE               set the base image used to generate the encrypted image
  --binary                  binary of the base image image
  --cli=CLI                 set the SCONE CLI image
  --name=SESSION	    name of CAS policy session

OPTIONAL:
  --dir=DIRECTORY           add directory to encrypt; add one option per directory
  --plain=DIRECTORIES       copy directories that are not encrypted
  --cas=CAS_ADDR            set the name of the CAS_ADDR (default=5-2-0.scone-cas.cf)
  --namespace=NAMESPACE     namespace of this session (default=RANDOM)
  --create-namespace        create namespace
  --trace=TRACE_FILE        use tracefile to create encrypted files
  --template=TEMPLATE_FILE  file containing policy template (default=session-template.yml)
  --session=SESSION_FILE    file that will contain the session (default=session.yml)

ADVANCED: (see https://sconedocs.github.io/SCONE_ENV/)
  --heap=SCONE_HEAP	    specify a custom value for the SCONE_HEAP. Expected value in range [8388608, 64424509440]. Allowed suffixes: kKmMgG. (default=1G)
  --stack=SCONE_STACK	    specify a custom value for the SCONE_STACK. Expected value in range [32768, 8388608]. Allowed suffixes: kKmMgG. (default=4M)
  --dlopen=SCONE_ALLOW_DLOPEN   specify a custom value for SCONE_ALLOW_DLOPEN. Expected value 0, 1 or 2. (default=2)


Usage example: encrypt Python image
./sconify_image --name=flask --from=native_flask_restapi_image --to=new_image --template=flask.template --namespace=my_unique_namespace --cas=5-2-0.scone-cas.cf
"
    exit 0
}


function parse_args {
    PARAMS=""

    if [[ $# == 0 ]]; then
        show_help
    fi

    while (( "$#" )); do
    arg=$1
    case "$arg" in

        -h|--help)
        show_help
        shift
        ;;

        --secrets=*)
        export SECRETS="${1#*=}"
        shift
        ;;

        --injectedfiles=*)
        export INJECTED_FILES="${1#*=}"
        shift
        ;;

        --name=*)
        export SESSION="${1#*=}"
        shift
        ;;

        --binary=*)
        BINARY="${1#*=}"
            shift
            ;;

        --from=*)
        NATIVE_IMAGE="${1#*=}"
        shift
        ;;

        --to=*)
        TO_IMAGE="${1#*=}"
        shift
        ;;

        --template=*)
        TEMPLATE_FILE="${1#*=}"
        shift
        ;;

        --trace=*)
        TRACE_FILE="${1#*=}"
        shift
        ;;

        --session=*)
        SESSION_FILE="${1#*=}"
        shift
        ;;

        --dir=*)
        ENC_DIRS+=(${1#*=})
        shift
        ;;

        --name=*)
        export SESSION="${1#*=}"
        shift
        ;;

        --namespace=*)
        export NAMESPACE="${1#*=}"
        shift
        ;;

        --create-namespace)
        export CREATE_NAMESPACE="1"
        shift
        ;;

        --plain=*)
        PLAIN_DIRS=(${1#*=})
        shift
        ;;

        --cas=*)
        CAS_ADDR="${1#*=}"
        shift
        ;;

        --heap=*)
        SCONE_HEAP="${1#*=}"
        shift
        ;;

        --stack=*)
        SCONE_STACK="${1#*=}"
        shift
        ;;

        --dlopen=*)
        SCONE_ALLOW_DLOPEN="${1#*=}"
        shift
        ;;

        *) # preserve positional arguments
        error_exit "unsupported command '$1'"
        ;;
    esac
    done
    # set positional arguments in their proper place

    eval set -- "$PARAMS"
}


function check_required_vars {
    check_empty "--from=IMAGE" "$NATIVE_IMAGE"
    check_empty "--to=IMAGE" "$TO_IMAGE"
    check_empty "--template=TEMPLATE_FILE" "$TEMPLATE_FILE"
    check_empty "--cas=CAS_ADDR" "$CAS_ADDR"
    check_empty "--cli=CLI_IMAGE" "$CLI_IMAGE"
    check_empty "--base=BASE_IMAGE" "$BASE_IMAGE"
    check_empty "--session=[SESSION_FILE]" "$SESSION_FILE"
    check_empty "--binary=[BINARY]" "$BINARY"
}


###
### Main
###

parse_args $@
check_required_vars

# check that required arguments are all defined


#  "Converting image $NATIVE_IMAGE to encrypted image $TO_IMAGE"

dir="$TO_IMAGE"
mkdir "$dir" || error_exit "Directory $TO_IMAGE already exists. Please remove if you want to regenerate."
pushd "$dir" >>/dev/stderr

cat >fspf.sh <<EOF
#!/bin/bash

set -e
export SCONE_MODE=SIM
mkdir -p /fspf
mkdir -p /fspf/encrypted-files/
mkdir -p /native-files
# create a file system protection file (first unencrypted)
scone fspf create /fspf/fs.fspf
# root region (i.e., "/") is not protected
scone fspf addr /fspf/fs.fspf / --not-protected --kernel /
EOF

for DIR in "${ENC_DIRS[@]}" ; do
    # echo "$DIR"
    cat >>fspf.sh <<EOF
# add encrypted region $DIR is stored in the image in /fspf/dir
scone fspf addr /fspf/fs.fspf $DIR --encrypted --kernel /fspf/encrypted-files$DIR
# encrypt and copy all files in directory /native$DIR to /fspf$DIR
mkdir -p /fspf/encrypted-files$DIR
EOF

if [[ "$TRACE_FILE" == "" ]] ; then
	echo "scone fspf addf /fspf/fs.fspf $DIR /native-files$DIR /fspf/encrypted-files$DIR" >>fspf.sh
fi
done

if [[ "$TRACE_FILE" != "" ]] ; then
	for FILE in "${FILES[@]}" ; do
		DIR=$(dirname "$FILE")
	        TOP=$(echo "$FILE" | awk -F/ '{print FS $2}')
        	echo "mkdir -p /fspf/encrypted-files$DIR" >>fspf.sh
        	echo "scone fspf addf /fspf/fs.fspf $TOP /native-files$FILE /fspf/encrypted-files$FILE" >>fspf.sh
	done
fi

cat >>fspf.sh <<EOF
# finally, encrypt the file system protection file and store the keys in directory (we assume in this demo that wee run on a trusted host)
scone fspf encrypt /fspf/fs.fspf > /native-files/keytag
cat /native-files/keytag
EOF
chmod a+x fspf.sh

cat >gettimestamps.sh <<EOF
#!/bin/sh
set -e
apk add --no-cache coreutils
echo "#!/bin/sh" >/fixtimestamps.sh
echo "set -e" >>/fixtimestamps.sh
echo "apk add --no-cache coreutils" >>/fixtimestamps.sh
EOF

for FILE in "${FILES[@]}" ; do
     	 echo "stat --print=\"touch -a -d '%x' /fspf/encrypted-files$FILE\n\" $FILE >> /fixtimestamps.sh" >>gettimestamps.sh
     	 echo "stat --print=\"touch -m -d '%y' /fspf/encrypted-files$FILE\n\"  $FILE >> /fixtimestamps.sh" >>gettimestamps.sh
done
echo "chmod a+x /fixtimestamps.sh" >>gettimestamps.sh
echo "cat /fixtimestamps.sh" >>gettimestamps.sh # DEBUG

chmod a+x gettimestamps.sh

cat >Dockerfile <<EOF
FROM $NATIVE_IMAGE
COPY gettimestamps.sh /gettimestamps.sh
RUN /gettimestamps.sh
FROM $CLI_IMAGE
COPY fspf.sh /fspf/fspf.sh
EOF

for DIR in "${ENC_DIRS[@]}" ; do
    # echo "$DIR"
    echo "COPY --from=0 $DIR /native-files$DIR" >>Dockerfile
done

# COPY FSPF FILE
cat >>Dockerfile <<EOF
RUN /fspf/fspf.sh
FROM $BASE_IMAGE
COPY --from=1  /fspf /fspf
COPY --from=0  /fixtimestamps.sh /fixtimestamps.sh
EOF
for DIR in "${PLAIN_DIRS[@]}" ; do
    # echo "$DIR"
    echo "COPY --from=0 $DIR $DIR" >>Dockerfile
done
cat >>Dockerfile <<EOF
RUN /fixtimestamps.sh \
  && rm /fixtimestamps.sh
EOF

docker build --no-cache -t $TO_IMAGE . > build-output.txt

# create policy

export SCONE_FSPF_KEY=$(cat build-output.txt | grep "Encrypted file system protection file" | awk '{print $11}')
export SCONE_FSPF_TAG=$(cat build-output.txt | grep "Encrypted file system protection file" | awk '{print $9}')

if [[ -z "$SCONE_FSPF_KEY" || -z "$SCONE_FSPF_TAG" ]] ; then
	echo "Could not extract FSPF KEY/TAG" > /dev/stderr
	exit 1
fi

default_pwd="/"
export ENVVARS=$(docker run -it --rm $NATIVE_IMAGE sh -c "env" | while IFS="=" read -r key value; do
  if [[ "$key" == "PWD" ]] ; then
     default_pwd="$value"
  else
     printf "        $key: \"${value/$'\r'}\"\r\n"
  fi
done ; echo "     pwd: \"$default_pwd\"" )
# determine MrEnclave of sconified binary
MRENCLAVE_0=$(docker run -it --rm -e SCONE_HASH=1 -e SCONE_HEAP=$SCONE_HEAP -e SCONE_STACK=$SCONE_STACK -e SCONE_ALLOW_DLOPEN=$SCONE_ALLOW_DLOPEN $TO_IMAGE $BINARY)
export MRENCLAVE=${MRENCLAVE_0/$'\r'}
CMD_0=$(docker image inspect --format "{{.Config.Cmd}}" $NATIVE_IMAGE)
CMD_1=${CMD_0#"[/bin/sh -c "}
export CMD=${CMD_1%"]"}




envsubst '$SCONE_FSPF_KEY $SCONE_FSPF_TAG $SESSION $MRENCLAVE $ENVVARS $CMD $SECRETS $INJECTED_FILES $NAMESPACE' < "../$TEMPLATE_FILE" >  "$SESSION_FILE"


SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# ensure that we have self-signed client certificate

if [[ ! -f client.pem || ! -f client-key.pem  ]] ; then
    openssl req -newkey rsa:4096 -days 365 -nodes -x509 -out client.pem -keyout client-key.pem -config ../clientcertreq.conf
fi


if [[ $CREATE_NAMESPACE == 1 ]] ; then
    mkdir -p $PWD/policy
    cat > $PWD/policy/ns_policy.yml <<EOF
    name: $NAMESPACE
    version: "0.3"

    access_policy:
      read:
      - CREATOR
      update:
      - CREATOR
      create_sessions:
      - CREATOR
EOF

    # Create the namespace
    curl -v -k -s --cert client.pem  --key client-key.pem  --data-binary @$PWD/policy/ns_policy.yml https://$CAS_ADDR:8081/v1/sessions >/dev/stderr || error_exit "Failed to create namespace $NAMESPACE"

    echo "Created namespace $NAMESPACE" > /dev/stderr
fi

# Check that we own the namespace

curl -v -k -s --cert client.pem  --key client-key.pem https://$CAS_ADDR:8081/v1/sessions/$NAMESPACE > /dev/null || error_exit "Failed to read namespace $NAMESPACE. Was it previously created by us?"

# Post the session

curl -v -k -s --cert client.pem  --key client-key.pem  --data-binary @$SESSION_FILE -X POST https://$CAS_ADDR:8081/v1/sessions >/dev/stderr


NAME="$NAMESPACE/$SESSION"
echo $NAME

popd >>/dev/stderr

exit 0
